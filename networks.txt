>	internet traffic :  flow of data in the internet 
> 	bursty traffic : uneven pattern data transmission  (ex :  http ,ftp )

>	interactive traffic : session consists of comparitively short request /response pairs 
        (ex: telenet ,online purchasing , web browsing )


>	allows a person siiting on one computer to work on other computer
         telnet<ip_address>

  Introduction


NS (network simulator) is a name for a series of discrete event network simulators, specifically ns-1, ns-2 and ns-3. NS (version 2) is an object oriented, discrete-event driven network simulator developed at UC Berkeley written in C++ and Otcl. NS is primarily useful for simulating local and wide area networks. NS is basically an Otcl interpreter with network simulation object libraries. Network simulator is a package of tools that simulates behaviour of networks such as creating network topologies, log events that happen under any load, analyze the events and understand the network. It is very useful to know how to program in Otcl to use NS. It is a discrete event simulator for networking research. It works at packet level and provides substantial support to simulate bunch of protocols like TCP, UDP, FTP, HTTP and DSR. It simulates wired and wireless network. It is primarily UNIX based and uses TCL as its scripting language. NS-2 is a standard experiment environment in the research community.

        File Transfer Protocol (FTP) is a standard network protocol used to transfer computer files between a client and server on a computer network. FTP is built on client-server model architecture and uses separate control and data connections between the client and the server. FTP users may authenticate themselves with a clear-text sign-in protocol, normally in the form of a username and password, but can connect anonymously if the server is configured to allow it.

       Telnet is an application layer protocol used on the Internet or local area networks to provide a bidirectional interactive text-oriented communication facility using a virtual terminal connection. User data is interspersed in-band with Telnet control information in an 8-bit byte oriented data connection over the Transmission Control Protocol (TCP).

         A simulation is defined by a Tcl program. Using the ns command, a network topology is defined, traffic sources and sinks are configured, statistics are collected, and the simulation is invoked. By building upon a fully functional language, arbitrary actions can be programmed into the configuration. The ns at command allows Tcl procedures to be invoked at arbitrary points in simulation time. These Tcl call-backs provide a flexible simulation mechanism - they can be used to start or stop sources, dump statistics, instantiate link failures, reconfigure the network topology, etc. The ns agent, ns node, and ns link commands all create new objects and return a procedure that is used to access the object, in the spirit of Tk(1) widgets. Once an object is created, it can be manipulated in an object-oriented fashion using the new procedure. For example, we might create a tcp agent using this command: set tcpSource [ns agent tcp ...].Each agent has a collection of such configuration parameters that can be modified as above either before a simulation begins, or dynamically, while the simulation is in progress. If a parameter is not explicitly set, it defaults to a value stored in a global Tcl array. For example, ns_tcp (window-size) contains the default window size for tcp objects. A set of defaults are built into the ns interpreter and can be explicitly overridden by simple assignment. For example, we can say set ns_tcp(window-size) 30 to make all future tcp agent creations default to a window size of 30.
          Once a topology is defined, agents are attached to nodes. Agents are the objects that actually produce and consume packets. Each agent is automatically assigned a port number unique across all agents on a given node (analogous to a tcp or udp port). Links can be thought of as the physical transmission links, nodes as end hosts and routers, and agents as transport entities and/or processes that run on end hosts. Some types of agents may have sources attached to them while others may generate their own data. For example, you can attach ''ftp'' and ''telnet'' sources to ''tcp'' agents but ''constant bit-rate'' agents generate their own data. The simulation is run via the ns run command, and continues until there are no more events to be processed. For example, a traffic source might be started at time 0 and stopped at time 10 (using the ns at command). Once all traffic sources are stopped, all pending packets will be eventually delivered and no more events will remain. At this time, the original invocation of the ns run command returns and the Tcl script can exit or invoke another simulation run after possible reconfiguration. Alternatively, the simulation can be prematurely halted by invoking the ns stop command or by exiting the script with Tcl's standard exit command.







Simulation part :-  
set ns [new Simulator]

#Open Trace and NAM Trace File
setntrace [open ex3.tr w]
$ns trace-all $ntrace
setnamfile [open ex3.nam w]
$ns namtrace-all $namfile

#Finish Procedure
proc Finish {} {
global ns ntracenamfile

#Dump all trace data and close the files
$ns flush-trace
close $ntrace
close $namfile

#Execute the nam animation file
execnam ex3.nam &
exit 0
}

$ns color 1 Blue
$ns color 2 Red

#Create four nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]

#Create links between the nodes
$ns duplex-link $n0 $n2 2Mb 10ms DropTail
$ns duplex-link $n1 $n2 2Mb 10ms DropTail
$ns simplex-link $n2 $n3 1Mb 10ms DropTail
$ns simplex-link $n3 $n2 1Mb 10ms DropTail

#Set queue size and Monitor the queue
$ns queue-limit $n0 $n2 10
$ns simplex-link-op $n0 $n2 queuePos 0.5

#Set TCP Connection between n0 and n3
set tcp0 [new Agent/TCP]
$ns attach-agent $n0 $tcp0

set sink0 [new Agent/TCPSink]
$ns attach-agent $n3 $sink0
$ns connect $tcp0 $sink0
$tcp0 set fid_ 1

#Attach FTP Application over TCP
set ftp0 [new Application/FTP]
$ftp0 attach-agent $tcp0
$ftp0 set type_ FTP

#Set TCP Connection between n1 and n3
set tcp1 [new Agent/TCP]
$ns attach-agent $n1 $tcp1
set sink1 [new Agent/TCPSink]
$ns attach-agent $n3 $sink1
$ns connect $tcp1 $sink1
$tcp1 set fid_ 2

#Attach Telnet Application over UDP
set telnet [new Application/Telnet]
$telnet attach-agent $tcp1
$telnet set type_ Telnet

#Schedule Events
$ns at 0.5 "$telnet start"
$ns at 0.5 "$ftp0 start"
$ns at 24.5 "$telnet stop"
$ns at 24.5 "$ftp0 stop"
$ns at 25.0 "Finish"

$ns run
--------------------
2.awk


BEGIN {

numTCP1=0;

tcpSize1=0;

numTCP2=0;

tcpSize2=0;

totaltcp1=0;

totaltcp2=0;

}

{

event=$1;

pkttype= $5;

fromnode=$9;

tonode=$10;

pktsize=$6;

if(event == "r" &&pkttype == "tcp" &&fromnode == "0.0" &&tonode == "3.0")

{

numTCP1++;

tcpSize1 = pktsize;

}

if(event == "r" &&pkttype == "tcp" &&fromnode == "1.0" &&tonode == "3.1")

{

numTCP2++;

tcpSize2 = pktsize;

}

}

END {

totaltcp1=numTCP1*tcpSize1*8;

totaltcp2=numTCP2*tcpSize2*8;

throughputtcp1= totaltcp1/24; # because simulation time is 24.5   0.5 = 24

throughputtcp2= totaltcp2/24; # because simulation time is 24.5   0.5 = 24

printf("The Throughput of FTP application is %d \n", throughputtcp1);

printf("The Throughput of TELNET application is %d \n", throughputtcp2);
   }	 